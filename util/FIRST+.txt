FIRST+(program->declaration_list void ID ( void ) compound_stmt) = {int, void}
FIRST+(program->void ID ( void ) compound_stmt) = {void}
FIRST+(declaration_list->declaration declaration_list') = {int, void}
FIRST+(declaration_list'->declaration declaration_list') = {int, void}
FIRST+(declaration_list'->ε) = {void, ε}
FIRST+(declaration->int ID var_declaration') = {int}
FIRST+(declaration->type_specifier ID ( params ) compound_stmt) = {int, void}
FIRST+(var_declaration->int ID var_declaration') = {int}
FIRST+(var_declaration'->;) = {;}
FIRST+(var_declaration'->[ NUM ] ;) = {[}
FIRST+(type_specifier->int) = {int}
FIRST+(type_specifier->void) = {void}
FIRST+(params->param param_list) = {int}
FIRST+(params->void) = {void}
FIRST+(param_list->, param param_list) = {,}
FIRST+(param_list->ε) = {), ε}
FIRST+(param->int ID param') = {int}
FIRST+(param'->[ ]) = {[}
FIRST+(param'->ε) = {,, ), ε}
FIRST+(compound_stmt->{ local_declarations statement_list }) = {{}
FIRST+(local_declarations->var_declaration local_declarations) = {int}
FIRST+(local_declarations->ε) = {output, return, while, {, if, ID, ε, input, }}
FIRST+(statement_list->statement statement_list) = {return, while, {, if, ID, input, output}
FIRST+(statement_list->ε) = {}, ε}
FIRST+(statement->ID statement') = {ID}
FIRST+(statement->{ local_declarations statement_list }) = {{}
FIRST+(statement->if ( expression ) statement selection_stmt) = {if}
FIRST+(statement->while ( expression ) statement) = {while}
FIRST+(statement->return return_stmt) = {return}
FIRST+(statement->input var ;) = {input}
FIRST+(statement->output expression ;) = {output}
FIRST+(statement'->var' = expression ;) = {[, =}
FIRST+(statement'->( call ;) = {(}
FIRST+(selection_stmt->else statement) = {else}
FIRST+(selection_stmt->ε) = {output, return, while, else, {, if, ID, ε, input, }}
FIRST+(return_stmt->;) = {;}
FIRST+(return_stmt->expression ;) = {NUM, ID, (}
FIRST+(var->ID var') = {ID}
FIRST+(var'->[ arithmetic_expression ]) = {[}
FIRST+(var'->ε) = {;, =, ε}
FIRST+(expression->arithmetic_expression expression') = {NUM, ID, (}
FIRST+(expression'->relop arithmetic_expression expression') = {<=, >, ==, !=, >=, <}
FIRST+(expression'->ε) = {;, ), ε}
FIRST+(relop-><=) = {<=}
FIRST+(relop-><) = {<}
FIRST+(relop->>) = {>}
FIRST+(relop->>=) = {>=}
FIRST+(relop->==) = {==}
FIRST+(relop->!=) = {!=}
FIRST+(arithmetic_expression->term arithmetic_expression') = {NUM, ID, (}
FIRST+(arithmetic_expression'->addop term arithmetic_expression') = {+, -}
FIRST+(arithmetic_expression'->ε) = {<=, !=, ;, ,, ==, >, ], ε, >=, <, )}
FIRST+(addop->+) = {+}
FIRST+(addop->-) = {-}
FIRST+(term->factor term') = {NUM, ID, (}
FIRST+(term'->mulop factor term') = {/, *}
FIRST+(term'->ε) = {<=, !=, ;, -, +, ,, ==, >, ], ε, >=, <, )}
FIRST+(mulop->*) = {*}
FIRST+(mulop->/) = {/}
FIRST+(factor->( arithmetic_expression )) = {(}
FIRST+(factor->ID factor') = {ID}
FIRST+(factor->NUM) = {NUM}
FIRST+(factor'->[ arithmetic_expression ]) = {[}
FIRST+(factor'->ε) = {<=, /, !=, ;, -, +, ,, ==, >, *, ], ε, >=, <, )}
FIRST+(factor'->( call) = {(}
FIRST+(call->args )) = {NUM, ID, (}
FIRST+(call->)) = {)}
FIRST+(args->arithmetic_expression args_list) = {NUM, ID, (}
FIRST+(args_list->, arithmetic_expression args_list) = {,}
FIRST+(args_list->ε) = {), ε}