program->declaration_list
declaration_list->declaration declaration_list | int ID var_declaration' | type_specifier ID ( params ) compound_stmt
declaration->var_declaration | fun_declaration
var_declaration->int ID var_declaration'
var_declaration'->; | [ NUM ] ;
type_specifier->int | void
fun_declaration->type_specifier ID ( params ) compound_stmt
params->param_list | void
param_list->param param_list'
param_list'->, param param_list' | ε
param->int ID param'
param'->[ ] | ε
compound_stmt->{ compound_stmt'
compound_stmt'->local_declarations compound_stmt'' | statement_list } | }
compound_stmt''->statement_list } | }
local_declarations->var_declaration local_declarations | int ID var_declaration'
statement_list->statement statement_list | assignment_stmt | call_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt | input_stmt | output_stmt
statement->assignment_stmt | call_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt | input_stmt | output_stmt
assignment_stmt->var = expression ;
call_stmt->call ;
selection_stmt->if ( expression ) statement selection_stmt'
selection_stmt'->else statement | ε
iteration_stmt->while ( expression ) statement
return_stmt->return return_stmt'
return_stmt'->; | expression ;
input_stmt->input var ;
output_stmt->output expression ;
var->ID var'
var'->[ arithmetic_expression ] | ε
expression->arithmetic_expression relop arithmetic_expression | arithmetic_expression
relop-><= | < | > | >= | == | !=
arithmetic_expression->term arithmetic_expression'
arithmetic_expression'->addop term arithmetic_expression' | ε
addop->+ | -
term->factor term'
term'->mulop factor term' | ε
mulop->* | /
factor->( arithmetic_expression ) | var | call | NUM
call->ID ( call'
call'->args ) | )
args->args_list
args_list->, arithmetic_expression args_list' | ε