program->declaration declaration_list       {void, int}
program->ε      {$, ε}
declaration_list->declaration declaration_list      {void, int}
declaration_list->ε     {$, ε}
declaration->int ID declaration'        {int}
declaration->void ID ( params ) compound_stmt          {void}
declaration'->;          {;}
declaration'->[ NUM ] ;          {[}
declaration'->( params ) compound_stmt          {(}
var_declaration->int ID var_declaration'          {int}
var_declaration'->;          {;}
var_declaration'->[ NUM ] ;          {[}
params->param param_list          {int}
params->void          {void}
param_list->, param param_list          {,}
param_list->ε          {ε, )}
param->int ID param'          {int}
param'->[ ]          {[}
param'->ε          {ε, ), ,}
compound_stmt->{ local_declarations statement_list }          {{}
local_declarations->var_declaration local_declarations          {int}
local_declarations->ε          {if, while, return, ε, input, }, output, ID, {}
statement_list->statement statement_list          {if, while, return, input, output, ID, {}
statement_list->ε          {ε, }}
statement->ID statement'          {ID}
statement->{ local_declarations statement_list }          {{}
statement->if ( expression ) statement selection_stmt          {if}
statement->while ( expression ) statement          {while}
statement->return return_stmt          {return}
statement->input var ;          {input}
statement->output expression ;          {output}
statement'->var' = expression ;          {[, =}
statement'->( call ;        {(}
selection_stmt->else statement      {else}
selection_stmt->ε       {if, while, return, ε, input, }, output, ID, {}
return_stmt->;      {;}
return_stmt->expression ;       {(, NUM, ID}
var->ID var'        {ID}
var'->[ arithmetic_expression ]     {[}
var'->ε     {ε, ;, =}
expression->arithmetic_expression expression'       {(, NUM, ID}
expression'->relop arithmetic_expression expression'          {!=, >, ==, <, <=, >=}
expression'->ε          {), ε, ;}
relop-><=          {<=}
relop-><          {<}
relop->>          {>}
relop->>=          {>=}
relop->==          {==}
relop->!=          {!=}
arithmetic_expression->term arithmetic_expression'          {(, NUM, ID}
arithmetic_expression'->addop term arithmetic_expression'          {-, +}
arithmetic_expression'->ε          {>=, ε, ,, !=, ], >, ;, ==, ), <=, <}
addop->+          {+}
addop->-          {-}
term->factor term'          {(, NUM, ID}
term'->mulop factor term'          {*, /}
term'->ε          {+, >=, ε, ,, -, !=, ], >, ;, ==, ), <=, <}
mulop->*          {*}
mulop->/          {/}
factor->( arithmetic_expression )          {(}
factor->ID factor'          {ID}
factor->NUM          {NUM}
factor'->[ arithmetic_expression ]          {[}
factor'->ε          {*, +, /, >=, ε, ,, -, !=, ], >, ;, ==, ), <=, <}
factor'->( call          {(}
call->args )          {(, NUM, ID}
call->)          {)}
args->arithmetic_expression args_list          {(, NUM, ID}
args_list->, arithmetic_expression args_list          {,}
args_list->ε          {ε, )}
